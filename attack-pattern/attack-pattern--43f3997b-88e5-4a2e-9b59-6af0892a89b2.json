{
    "type": "bundle",
    "id": "bundle--722f306e-d512-4dab-ba8d-bbea9ac9a815",
    "objects": [
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--43f3997b-88e5-4a2e-9b59-6af0892a89b2",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2020-02-05T20:28:15.192Z",
            "modified": "2020-08-25T21:10:05.941955Z",
            "name": "Sandbox Detection",
            "description": "Detects whether the malware instance is being executed inside an instrumented sandbox environment (e.g., Cuckoo Sandbox). If so, conditional execution selects a benign execution path.",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-mbc",
                    "phase_name": "anti-behavioral-analysis"
                }
            ],
            "revoked": true,
            "external_references": [
                {
                    "source_name": "mitre-mbc",
                    "url": "https://github.com/MBCProject/mbc-markdown/blob/master/anti-behavioral-analysis/detect-sandbox.md",
                    "external_id": "M0007"
                },
                {
                    "source_name": "external_source",
                    "url": "https://www.fireeye.com/blog/threat-research/2011/01/the-dead-giveaways-of-vm-aware-malware.html"
                },
                {
                    "source_name": "external_source",
                    "url": "http://labs.lastline.com/exposing-rombertik-turning-the-tables-on-evasive-malware"
                },
                {
                    "source_name": "external_source",
                    "url": "https://github.com/LordNoteworthy/al-khaser"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "x_mitre_methods": [
                {
                    "definition": "Checks clipboard data which can be used to detect whether execution is inside a sandbox.",
                    "name": "Check Clipboard Data"
                },
                {
                    "definition": "Sandboxes create files on the file system. Malware can check the different folders to find sandbox artifacts.",
                    "name": "Check Files"
                },
                {
                    "definition": "Detects whether there is any \"user\" activity on the machine, such as the movement of the mouse cursor, non-default wallpaper, or recently opened Office files. If there is no human activity, the machine is suspected to be a virtualized machine and/or sandbox. Other items used to detect a user: mouse clicks (single/double), DialogBox, scrolling, color of background pixel [[3]](#3).",
                    "name": "Human User Check"
                },
                {
                    "definition": "Testing for the name of a particular DLL that is known to be injected by a sandbox for API hooking is a common way of detecting sandbox environments. This can be achieved through the kernel32!GetModuleHandle API call and other means.",
                    "name": "Injected DLL Testing"
                },
                {
                    "definition": "Checking for a particular product key/ID associated with a sandbox environment (commonly associated with the Windows host OS used in the environment) can be used to detect whether a malware instance is being executed in a particular sandbox. This can be achieved through several means, including testing for the Key/ID in the Windows registry.",
                    "name": "Product Key/ID Testing"
                },
                {
                    "definition": "Sandboxes aren't used in the same manner as a typical user environment, so most of the time the screen resolution stays at the minimum 800x600 or lower. No one is actually working on a such small screen. Malware could potentially detect the screen resolution to determine if it's a user machine or a sandbox.",
                    "name": "Screen Resolution Testing"
                },
                {
                    "definition": "Malware may check its own characteristics to determine whether it's running in a sandbox. For example, a malicious Office document might check its file name or VB project name.",
                    "name": "Self Check"
                },
                {
                    "definition": "Calling GetSystemTime or equiv and only executing code if the current date/hour/minute/second passes some check. Often this is for running only after or only until a specific date. This behavior can be mitigated in non-automated analysis environments.",
                    "name": "Timing/Date Check"
                },
                {
                    "definition": "Comparing single GetTickCount with some value to see if system has been started at least *X* amount ago. This behavior can be mitigated in non-automated analysis environments.",
                    "name": "Timing/Uptime Check"
                }
            ]
        }
    ]
}