{
    "type": "bundle",
    "id": "bundle--048383dc-97d2-46aa-b3f2-54db36c958cb",
    "objects": [
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--bfa0510e-ffed-49a3-a66a-cef073dd488e",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2020-02-05T20:28:15.162Z",
            "modified": "2020-02-05T20:28:15.162Z",
            "name": "Disassembler Evasion",
            "description": "Malware code evades disassembly in a recursive or linear disassembler. Some methods apply to both types of disassemblers; others apply to one type and not the other.",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-mbc",
                    "phase_name": "anti-static-analysis"
                }
            ],
            "external_references": [
                {
                    "source_name": "mitre-mbc",
                    "url": "https://github.com/MBCProject/mbc-markdown/blob/master/anti-static-analysis/evade-disassembler.md",
                    "external_id": "M0012"
                },
                {
                    "source_name": "external_source",
                    "url": "http://staff.ustc.edu.cn/~bjhua/courses/security/2014/readings/anti-disas.pdf"
                },
                {
                    "source_name": "external_source",
                    "url": "http://www.kernelhacking.com/rodrigo/docs/blackhat2012-paper.pdf"
                },
                {
                    "source_name": "external_source",
                    "url": "https://isc.sans.edu/diary/Malicious+VBA+Office+Document+Without+Source+Code/24870"
                },
                {
                    "source_name": "external_source",
                    "url": "https://boingboing.net/2019/05/05/p-code-r-us.html"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "x_mitre_methods": [
                {
                    "definition": "Simple number or string arguments to API calls are calculated at runtime, making linear disassembly more difficult.",
                    "name": "Argument Obfuscation"
                },
                {
                    "definition": "Conditional jumps are sometimes used to confuse disassembly engines, resulting in the wrong instruction boundaries and thus wrong mnemonic and operands; identified by instructions *jmp/jcc to a label+#* (e.g., JNE loc_401345fe+2).",
                    "name": "Conditional Misdirection"
                },
                {
                    "definition": "Explicit use of computed values for control flow, often many times in the same basic block or function.",
                    "name": "Value Dependent Jumps"
                },
                {
                    "definition": "Variables, often strings, are broken into multiple parts and store out of order, in different memory ranges, or both. They must then be recomposed before use.",
                    "name": "Variable Recomposition"
                },
                {
                    "definition": "Typically, VBA source code is compiled into p-code, which is stored with compressed sourced code in the OLE file with VBA macros. VBA Stomping - when the VBA source code is removed and only the p-code remains - makes analysis much harder. See [[3]](#3) for an analysis of a VBA-Stomped malicious VBA Office document. See [[4]](#4) for information on Evil Clippy, a tool that creates malicious MS Office documents.",
                    "name": "VBA Stomping"
                }
            ]
        }
    ]
}