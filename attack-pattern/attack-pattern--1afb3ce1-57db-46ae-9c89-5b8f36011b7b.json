{
    "type": "bundle",
    "id": "bundle--e4d5f4f2-0955-4a5d-b8cf-80530a3adf59",
    "objects": [
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--1afb3ce1-57db-46ae-9c89-5b8f36011b7b",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2020-02-05T20:28:15.159Z",
            "modified": "2020-08-25T21:10:05.824997Z",
            "name": "Call Graph Generation Evasion",
            "description": "Malware code evades accurate call graph generation during disassembly. Call graphs are used by malware similarity tools and algorithms ([[1]](#1), [[4]](#4)), as well as for malware detection [[2]](#2).",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-mbc",
                    "phase_name": "anti-static-analysis"
                }
            ],
            "revoked": true,
            "external_references": [
                {
                    "source_name": "mitre-mbc",
                    "url": "https://github.com/MBCProject/mbc-markdown/blob/master/anti-static-analysis/evade-call-graph.md",
                    "external_id": "M0010"
                },
                {
                    "source_name": "external_source",
                    "description": "K. Blokhin, D. Mentis, J. Saxe, \"Malware Similarity Identification Using Call Graph Based System Call Subsequence Features,\" 2013 IEEE 33rd International Conference on Distributed Computing Systems Workshops, July 2013.",
                    "url": "https://www.researchgate.net/publication/269326967_Malware_Similarity_Identification_Using_Call_Graph_Based_System_Call_Subsequence_Features"
                },
                {
                    "source_name": "external_source",
                    "description": "P. Deshpande, M. Stamp, \"Metamorphic Malware Detection Using Function Call Graph Analysis,\" MIS Review Vol. 21, Nos. 1/2, September(2015)/March(2016).",
                    "url": "https://pdfs.semanticscholar.org/8db2/69106ea6e1f59e4dac0889665dd3336ee9b1.pdf"
                },
                {
                    "source_name": "external_source",
                    "url": "http://fumalwareanalysis.blogspot.com/2012/01/malware-analysis-tutorial-10-tricks-for.html"
                },
                {
                    "source_name": "external_source",
                    "description": "S. Shang, N. Zheng, J. Xu, M. Xu, H. Zhang, \"Detecting Malware Variants via Function-call Graph Similarity,\" IEEE 2010 5th International Conference on Malicious and Unwanted Software, 2010.",
                    "url": "http://seclab.hdu.edu.cn/static/uploads/paper/10-05.pdf"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "x_mitre_methods": [
                {
                    "definition": "two layer jumping confuses tools plotting call graphs. [[3]](#3)",
                    "name": "Two-layer Function Return"
                },
                {
                    "definition": "invokes ntdll.dll functions without using an export table; an encoded translation table on the stack is used instead. [[3]](#3)",
                    "name": "Invoke NTDLL System Calls via Encoded Table"
                }
            ]
        }
    ]
}