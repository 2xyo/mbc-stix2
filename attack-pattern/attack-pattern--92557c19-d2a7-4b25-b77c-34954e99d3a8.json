{
    "type": "bundle",
    "id": "bundle--2b03f4c2-894d-49cf-ba59-01874987b721",
    "objects": [
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--92557c19-d2a7-4b25-b77c-34954e99d3a8",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2020-02-05T20:28:15.390Z",
            "modified": "2020-02-05T20:28:15.390Z",
            "name": "Process Injection",
            "description": "Malware may execute code in the address space of a separate process.",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-mbc",
                    "phase_name": "defense-evasion"
                },
                {
                    "kill_chain_name": "mitre-mbc",
                    "phase_name": "privilege-escalation"
                }
            ],
            "external_references": [
                {
                    "source_name": "mitre-mbc",
                    "url": "https://github.com/MBCProject/mbc-markdown/blob/master/defense-evasion/process-inject.md",
                    "external_id": "E1055"
                },
                {
                    "source_name": "external_source",
                    "description": "Ashkan Hosseini, *Ten Process Injection Techniques: A Technical Survey of Common and Trending Process Injection Techniques*, July 2017.",
                    "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
                },
                {
                    "source_name": "external_source",
                    "url": "https://www.cyber.nj.gov/threat-profiles/trojan-variants/poison-ivy"
                },
                {
                    "source_name": "external_source",
                    "url": "https://github.com/LordNoteworthy/al-khaser"
                },
                {
                    "source_name": "external_source",
                    "url": "https://citizenlab.ca/2016/04/between-hong-kong-and-burma/"
                },
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/techniques/T1055",
                    "external_id": "T1055"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "x_mitre_methods": [
                {
                    "definition": "Injects code using the Shell_TRyaWnd technique.",
                    "name": "Shell_TrayWnd"
                },
                {
                    "definition": "Malware creates a thread using CreateRemoteThread (or NtCreateThreadEx, RtlCreateUserThread) and LoadLibrary. The path to the malware's malicious dynamic-link library (DLL) is written in the virtual address space of another process; the malware ensures the remote process loads it by creating a remote thread in the target process. This is one of the most common process injection methods. [[1]](#1)",
                    "name": "CreateRemoteThread"
                },
                {
                    "definition": "Malware copies its malicious code into an existing open process and causes it to execute via shellcode or by calling CreateRemoteThread (instead of passing the address of the LoadLibrary) [[1]](#1)",
                    "name": "PE Injection"
                },
                {
                    "definition": "Malware targets an existing thread of a process, avoiding noisy process or thread creations operations. [[1]](#1)",
                    "name": "Thread Execution Hijacking"
                },
                {
                    "definition": "Malware can leverage hooking functionality to have its malicious DLL loaded upon an event getting triggered in a specific thread, which is usually done by calling SetWindowsHookEx to install a hook routine into the hook chain. [[1]](#1)",
                    "name": "SetWindowsHooksEx"
                },
                {
                    "definition": "Malware may leverage Asynchronous Procedure Calls (APC) to force another thread to execute its code by attaching it to the APC Queue of the target thread (using QueueUserAPC / NtQueueApcThread); also called AtomBombing [[1]](#1), [[3]](#3).",
                    "name": "APC Injection"
                },
                {
                    "definition": "GetThreadContext / SetThreadContext [[3]](#3).",
                    "name": "RunPE"
                },
                {
                    "definition": "Malware may insert the location of its malicious library under a registry key (e.g., Appinit_DLL, AppCertDlls, IFEO) to have another process load its library. [[1]](#1)",
                    "name": "Registry Modification"
                },
                {
                    "definition": "",
                    "name": "Extra Window Memory Injection (EWMI)"
                },
                {
                    "definition": "Malware may use shims to target an executable (shims are a way of hooking into APIs and targeting specific executables and are provided by Microsoft for backward compatibility, allowing developers to apply program fixes without rewriting code) [[1]](#1).",
                    "name": "Shims"
                }
            ]
        }
    ]
}