{
    "type": "bundle",
    "id": "bundle--be722ba6-4523-4190-9601-1538a540fba3",
    "objects": [
        {
            "type": "attack-pattern",
            "spec_version": "2.1",
            "id": "attack-pattern--9188ea31-fa9e-4fad-949b-f705e0fabd20",
            "created_by_ref": "identity--b73c59c1-8560-449a-b8d0-c2ce0533c5bf",
            "created": "2020-02-05T20:28:15.172Z",
            "modified": "2020-02-05T20:28:15.172Z",
            "name": "Debugger Evasion",
            "description": "Behaviors that make debugging difficult.",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-mbc",
                    "phase_name": "anti-behavioral-analysis"
                }
            ],
            "external_references": [
                {
                    "source_name": "mitre-mbc",
                    "url": "https://github.com/MBCProject/mbc-markdown/blob/master/anti-behavioral-analysis/evade-debugger.md",
                    "external_id": "M0002"
                },
                {
                    "source_name": "external_source",
                    "url": "https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf"
                },
                {
                    "source_name": "external_source",
                    "url": "https://www.synack.com/2016/02/17/analyzing-the-anti-analysis-logic-of-an-adware-installer/"
                },
                {
                    "source_name": "external_source",
                    "url": "http://phishme.com/dridex-code-breaking-modify-the-malware-to-bypass-the-vm-bypass/"
                },
                {
                    "source_name": "external_source",
                    "url": "http://antukh.com/blog/2015/01/19/malware-techniques-cheat-sheet/"
                },
                {
                    "source_name": "external_source",
                    "url": "http://unprotect.tdgt.org/index.php/Unprotect_Project"
                }
            ],
            "object_marking_refs": [
                "marking-definition--093b6375-cd45-4aa3-8f91-6a03ddd7a3d3"
            ],
            "x_mitre_methods": [
                {
                    "definition": "Block interrupt (via hooking) 1 and/or 3 to prevent debuggers from working.",
                    "name": "Block Interrupts"
                },
                {
                    "definition": "Intentionally clearing software or hardware breakpoints.",
                    "name": "Break Point Clearing"
                },
                {
                    "definition": "Move or copy the first bytes / instructions of the original code elsewhere. AKA stolen bytes or code splicing. For example, a packer may incorporate the first few instructions of the original EntryPoint (EP) into its unpacking stub before the tail transition in order to confuse automated unpackers and novice analysts. This can make it harder for rebuilding and may bypass breakpoints if set prematurely.",
                    "name": "Byte Stealing"
                },
                {
                    "definition": "Changinging this value during run time can prevent some debuggers from attaching. Also confuses some unpackers and dumpers.",
                    "name": "Change SizeOfImage"
                },
                {
                    "definition": "Check that the unpacking code is unmodified. Variation exists where unpacking code is part of the \"key\" used to unpack, therefore any Software Breakpoints during debugging causes unpacking to completely fail or result in malformed unpacked code.",
                    "name": "Code Integrity Check"
                },
                {
                    "definition": "Using exception handling (SEH) to cause flow of program to non-obvious paths.",
                    "name": "Exception Misdirection"
                },
                {
                    "definition": "CALL to a POP; finds base of code or data, often the packed version of the code; also used often in obfuscated/packed shellcode.",
                    "name": "Get Base Indirectly"
                },
                {
                    "definition": "Encrypt blocks of code individually and decrypt temporarily only upon execution.",
                    "name": "Guard Pages"
                },
                {
                    "definition": "modification of interrupt vector or descriptor tables.",
                    "name": "Hook Interrupt"
                },
                {
                    "definition": "Add obfuscation between imports calls and APIs.",
                    "name": "Import Obfuscation"
                },
                {
                    "definition": "variation of static linking where full API code inserted everywhere it would have been called.",
                    "name": "Inlining"
                },
                {
                    "definition": "Use SEH or other methods to break out of a loop instead of a conditional jump.",
                    "name": "Loop Escapes"
                },
                {
                    "definition": "Instead of unpacking into a pre-defined section/segment (ex: .text) of the binary, use malloc() / VirtualAlloc() to create a new segment. This makes keeping track of memory locations across different runs more difficult, as there is no guarantee that malloc/VirtualAlloc will assign the same address range each time.",
                    "name": "Malloc Use"
                },
                {
                    "definition": "Any part of the header is changed or erased.",
                    "name": "Modify PE Header"
                },
                {
                    "definition": "int3 with code replacement table; debugs itself.",
                    "name": "Nanomites"
                },
                {
                    "definition": "LoadLibrary API calls or direct access of kernel32 via PEB (fs[0]) pointers, used to rebuild IAT or just obfuscate library use.",
                    "name": "Obfuscate Library Use"
                },
                {
                    "definition": "Use several parallel threads to make analysis harder.",
                    "name": "Parallel Threads"
                },
                {
                    "definition": "Take advantage of pipelining in modern processors to misdirect debugging, emulation, or static analysis tools. An unpacker can assume a certain number of opcodes will be cached and then proceed to overwrite them in memory, causing a debugger/emulator/analyzer to follow different code than is normally executed.",
                    "name": "Pipeline Misdirection"
                },
                {
                    "definition": "Prevents debugger from attaching to process or to break until after the code of interest has been executed",
                    "name": "Pre-Debug"
                },
                {
                    "definition": "relocate API code in separate buffer (calls donâ€™t lead to imported DLLs).",
                    "name": "Relocate API Code"
                },
                {
                    "definition": "Overwrite the RET address on the stack or the code at the RET address. Variation seen that writes to the start-up code or main module that called the malware's WinMain or DllMain.",
                    "name": "Return Obfuscation"
                },
                {
                    "definition": "Calling RtlAdjustPrivilege to either prevent a debugger from attaching or to detect if a debugger is attached.",
                    "name": "RtlAdjustPrivilege"
                },
                {
                    "definition": "Some analysis tools cannot handle binaries with misaligned sections.",
                    "name": "Section Misalignment"
                },
                {
                    "definition": "Debug itself to prevent another debugger to be attached.",
                    "name": "Self-Debugging"
                },
                {
                    "definition": "UnmapViewOfFile() on itself",
                    "name": "Self-Unmapping"
                },
                {
                    "definition": "Copy locally the whole content of API code.",
                    "name": "Static Linking"
                },
                {
                    "definition": "A variation of \"byte stealing\" where the first few instructions or bytes of an API are executed in user code, allowing the IAT to point into the middle of an API function. This confuses IAT rebuilders such as ImpRec and Scylla and may bypass breakpoints.",
                    "name": "Stolen API Code"
                },
                {
                    "definition": "Erase or corrupt specific file parts to prevent rebuilding (header, packer stub, etc.).",
                    "name": "Tampering"
                },
                {
                    "definition": "Setting dwMilliseconds in WaitForSingleObject to a small number will timeout the thread before the analyst can step through and analyze the code executing in the thread. Modifying this via patch, register, or stack to the value `0xFFFFFFFF`, the **INFINITE** constant circumvents this anti-debugging technique.",
                    "name": "Thread Timeout"
                },
                {
                    "definition": "The unpacking code relies on use of int 1 or int 3, or it uses the interrupt vector table as part of the decryption \"key\".",
                    "name": "Use Interrupts"
                }
            ]
        }
    ]
}